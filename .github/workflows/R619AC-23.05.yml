#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: OpenWrt-23.05-R619AC

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: [started]
    
env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-23.05
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
           
    steps:

    - name: 检查服务器配置
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
        
    - name: 校验
      uses: actions/checkout@v3.1.0  
      
    - name: 可用磁盘空间
      run: |
           echo "Free space:"
           df -h
           
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E apt-get -qq install libfuse-dev
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H<br/>")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        
    - name: 更新程序包
      env:
        SCKEY: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      run: |
        ls
        cd openwrt/package
        mkdir NeoBird
        cd NeoBird
        
        # git clone -b 23.05 https://github.com/leesuncom/smartdns.git smartdns
        git clone https://github.com/kiddin9/openwrt-packages.git   
        
    - name: 文件修补一
      run: |        
        # cp -f patch/rc.local openwrt/package/base-files/files/etc/rc.local
        cd openwrt
        sed -i 's/192.168.1.1/192.168.1.2/g' package/base-files/files/bin/config_generate
        sed -i 's/ImmortalWrt/NeoBird/g' package/base-files/files/bin/config_generate        
        sed -i 's/^IMG_PREFIX\:\=.*/IMG_PREFIX:=$(VERSION_DIST_SANITIZED)-$(shell TZ=UTC-8 date +"%Y.%m.%d-%H%M")-$(IMG_PREFIX_VERNUM)$(IMG_PREFIX_VERCODE)$(IMG_PREFIX_EXTRA)$(BOARD)$(if $(SUBTARGET),-$(SUBTARGET))/g' include/image.mk
        
    - name: 更新订阅源
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: 文件修补二
      run: |
                
    - name: 生成配置文件
      run: |
        cd openwrt
        rm -f ./.config*
        touch ./.config
        
        #
        # ========================固件定制部分========================
        # 
        # 
        # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
        # 
        # 以下为定制化固件选项和说明:
        #
        #
        # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
        # 
        #          =========================================
        #         |  # 取消编译VMware镜像:                   |
        #         |  cat >> .config <<EOF                   |
        #         |  # CONFIG_VMDK_IMAGES is not set        |
        #         |  EOF                                    |
        #          =========================================
        #
        # 
        # 以下是一些提前准备好的一些插件选项.
        # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
        # 如果不需要代码块里的某一项配置, 只需要删除相应行.
        #
        # 如果需要其他插件, 请按照示例自行添加.
        # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
        # 
        # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
        # 
        # 编译竞斗云固件:
        
        cat >> .config <<EOF
        CONFIG_TARGET_ipq40xx=y
        CONFIG_TARGET_ipq40xx_generic=y
        CONFIG_TARGET_ipq40xx_generic_DEVICE_p2w_r619ac-128m=y
        EOF
        
        # USB2.0支持:
        # cat >> .config <<EOF
        # CONFIG_PACKAGE_kmod-usb-core=y
        # CONFIG_PACKAGE_kmod-usb-dwc3=y
        # CONFIG_PACKAGE_kmod-usb-dwc3-qcom=y
        # CONFIG_PACKAGE_kmod-usb-storage=y
        # CONFIG_PACKAGE_kmod-usb-storage-extras=y
        # CONFIG_PACKAGE_kmod-usb-storage-uas=y
        # CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        # CONFIG_PACKAGE_kmod-usb3=y
        # EOF
        
        # IPv6支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
        CONFIG_PACKAGE_ip6tables=y
        CONFIG_PACKAGE_ip6tables-extra=y
        CONFIG_PACKAGE_ip6tables-mod-nat=y
        CONFIG_PACKAGE_ipv6helper=y
        EOF
        
        # LuCI插件选择:
        cat >> .config <<EOF
        # CONFIG_PACKAGE_luci-app-arpbind=y
        CONFIG_PACKAGE_luci-app-adguardhome=y
        CONFIG_PACKAGE_luci-app-iptvhelper=y
        CONFIG_PACKAGE_luci-app-ddns-go=y
        # CONFIG_PACKAGE_luci-app-cpufreq is not set
        # CONFIG_PACKAGE_luci-app-aliddns is not set
        CONFIG_PACKAGE_luci-app-mosdns=y
        # CONFIG_PACKAGE_luci-app-openclash=y
        CONFIG_PACKAGE_luci-app-argon-config=y
        # CONFIG_PACKAGE_luci-app-autoreboot=y
        CONFIG_PACKAGE_luci-app-commands=y
        CONFIG_PACKAGE_luci-app-opkg=y
        # CONFIG_PACKAGE_luci-app-ddns is not set
        CONFIG_PACKAGE_luci-app-firewall=y
        # CONFIG_PACKAGE_luci-app-filetransfer=y
        # CONFIG_PACKAGE_luci-app-passwall=y
        # CONFIG_PACKAGE_luci-app-pushbot is not set
        # CONFIG_PACKAGE_luci-app-ramfree is not set
        # CONFIG_PACKAGE_luci-app-samba4 is not set
        # CONFIG_PACKAGE_luci-app-ssr-plus is not set
        # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray is not set
        CONFIG_PACKAGE_luci-app-smartdns=y
        # CONFIG_PACKAGE_luci-app-sqm is not set
        CONFIG_PACKAGE_luci-app-ttyd=y
        CONFIG_PACKAGE_luci-app-upnp=y
        # CONFIG_PACKAGE_luci-app-udpxy is not set
        # CONFIG_PACKAGE_luci-app-vsftpd is not set
        CONFIG_PACKAGE_luci-app-vlmcsd=y       
        CONFIG_PACKAGE_luci-app-wol=y
        # CONFIG_PACKAGE_luci-app-watchcat is not set
        # CONFIG_PACKAGE_luci-app-zerotier is not set
        EOF
        
        # LuCI主题:
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-theme-argon=y
        EOF
        
        # 常用软件包:
        cat >> .config <<EOF
        CONFIG_PACKAGE_autocore=y
        # CONFIG_PACKAGE_automount is not set
        # CONFIG_PACKAGE_autosamba is not set
        EOF
        
        # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
        # cat >> .config <<EOF
        # # CONFIG_TARGET_IMAGES_PAD is not set
        # # CONFIG_VMDK_IMAGES is not set
        # EOF
        # 
        # ========================固件定制部分结束========================
        # 
        
        sed -i 's/^[ \t]*//g' ./.config
        make defconfig          
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf Packages.tar.gz ./*
        cp Packages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        
    - name: 计算编码
      run: |
        cd ${{ env.FIRMWARE }} && rm -rf sha256sums
        MD5=$(md5sum * | sed ':a;N;$!ba;s/\n/<br>/g')
        echo "MD5=$MD5" >> $GITHUB_ENV
        
    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布固件
      id: release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: ${{ steps.organize.outputs.release_tag }} for R619AC-128M
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ steps.organize.outputs.release_tag }}
        commit: main
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE }}/*
        body: |
          ✅ 源码版本:23.05SNAPSHOT
          ✅ 内核:5.15
          ✅ 当前使用版本:【编译前的最后一次[➦主源码](${{ env.REPO_URL }})更新记录】
          ✅ 下载后请仔细校验MD5，如不正确请重新下载
          ${{ env.useVersionInfo }}
          
          `md5sum`
          > ${{ env.MD5 }}
          
    - name: 清理工作流程
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 清理旧固件
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 4
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
